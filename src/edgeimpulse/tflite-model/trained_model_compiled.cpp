/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.05.2022 20:55:54

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2240;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteEvalTensor tflEvalTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,544 } };
const TfArray<1, float> quant0_scale = { 1, { 0.035783834755420685, } };
const TfArray<1, int> quant0_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 200, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[14] = { -79, -59, -112, -72, -69, -59, -52, -127, -76, -17, -81, -126, -84, -17, };
const TfArray<1, int> tensor_dimension2 = { 1, { 14 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0079742632806301117, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[25] = { 12, 5, -110, 85, 66, 7, 79, 61, 62, 42, -127, -123, -87, -65, -4, -83, -50, 103, 51, 87, 103, -32, -53, 70, 58, };
const TfArray<1, int> tensor_dimension3 = { 1, { 25 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0044004782103002071, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[12] = { 678, -1023, -824, 194, 337, 37, 392, 871, 805, -470, -665, 44, };
const TfArray<1, int> tensor_dimension4 = { 1, { 12 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00041891055298037827, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[12*200] = { 
  -16, 11, -33, -47, 28, -39, -24, -7, 10, 5, -9, -35, -67, 41, -81, -26, -44, -5, -5, 6, 18, 2, -17, -27, -13, -7, 31, -15, -15, 26, -13, -20, -5, 21, 23, 0, -78, -33, 33, -80, -26, -44, 11, -13, 16, 16, -6, -24, -35, -35, 7, 23, -12, -35, 28, 1, -9, -30, 3, 10, -25, -60, -33, 42, -59, -25, -42, 9, -2, 27, 3, -20, -52, -19, -39, 6, 21, -1, -33, 38, -2, 8, -50, -4, 17, -25, -61, -36, 44, -55, 23, -45, 5, -16, 29, -23, -43, -48, -28, -22, -2, 6, 3, -45, 29, 17, 19, -46, -1, -5, -12, -31, -39, 41, -38, 5, -20, 11, -25, 37, -21, -51, -42, -11, -5, -5, 2, -6, -40, 24, 8, 17, -28, 7, 20, -12, -38, -41, 41, -10, 1, -20, 20, -48, 34, -41, -46, -30, -3, -13, 1, 17, -28, -22, 17, 14, 15, -6, 3, -4, -5, -27, -33, 31, 8, -24, -23, 24, -18, 42, -38, -47, -28, -3, 4, -7, 14, -27, -26, -12, 28, 27, 15, 20, -23, 4, -8, -34, 19, -4, -29, -18, -10, -25, 33, -34, -28, 4, 17, 2, 
  3, -32, 1, -26, -29, -13, -38, -9, -3, -88, -21, 27, 2, -35, 25, -112, 19, -63, -26, -3, -24, 25, -10, -13, 33, -3, -37, -29, 4, 5, -24, -45, -10, 2, -42, 2, 5, -15, -46, 21, -42, 14, -40, 8, -36, -21, 17, -12, -27, 51, -1, 12, 1, 33, 2, -12, -16, 3, 16, 5, 5, 10, -9, -34, 27, -12, 8, 3, 9, -39, -65, 7, 10, -38, 13, -39, 34, -13, 33, 6, -21, 3, 10, 39, -3, 10, 27, -19, -59, 27, 9, 24, 24, 9, -61, -17, -3, 18, -73, 21, -29, 23, 10, 37, 1, -31, 16, 9, -2, 9, -11, 8, -36, -43, 17, -5, 19, 21, 20, -31, -15, 18, 17, -29, -2, -25, 19, 18, 31, -3, -33, 13, 7, -17, 15, -18, 10, -2, -34, 2, -2, 1, 22, 16, -46, -18, 14, 14, -20, -1, -59, 12, 3, 35, 5, -29, -10, -14, -19, 11, -31, 10, 31, -22, -9, -3, 21, 28, 12, -26, -25, -2, 12, -14, 4, -70, 3, -10, 32, -9, -50, -15, -7, -25, 20, -29, -10, 15, -34, 2, 0, -1, 17, -7, -15, -5, 21, 24, -51, 6, 
  12, 20, 30, 15, 14, -79, -32, 13, -11, 18, -22, -24, 3, 9, -38, -27, 35, 25, -35, -25, 6, -73, 26, -6, -51, 15, -9, 42, 12, -8, -51, -19, 29, 14, 5, -16, 25, 5, 9, -9, -27, 30, 11, -46, -31, 0, -17, 12, 11, -37, 23, -1, 28, 3, -39, 1, -28, -4, 3, 2, -16, 12, 10, 20, 11, -40, 37, -9, -48, -27, -6, -10, -5, 8, -10, 17, 6, -4, -39, -44, 5, -16, -31, 5, -26, 9, 3, 17, 13, 25, -25, 29, -16, -36, -24, -15, -8, -17, -2, -15, 19, -28, -10, -35, -56, -6, -21, -19, -29, -12, -4, 5, 9, -2, 14, -13, 43, -6, -28, -39, -15, -2, -32, -20, -7, 25, -4, -14, -17, -69, -7, -9, 13, 2, 4, -5, -4, 15, -50, 12, 6, 29, -7, -39, -14, 5, -1, -20, -27, 15, 21, -21, -22, -23, -29, -4, -13, 15, 2, 13, 2, 5, 10, 1, 19, 1, 54, -4, -18, -16, 15, -16, -28, -4, -2, 42, -9, 22, -18, -29, -15, -37, 14, -23, 25, 12, -4, 14, 8, 15, 7, 19, -8, -16, -31, -28, 0, -15, 13, -6, 
  22, 29, -24, -1, -16, 7, -14, -62, 9, -81, -27, 41, -11, -2, 25, 0, 24, 2, -6, 19, 7, 1, -16, 32, 26, 13, -2, -15, 1, -20, 8, -18, -33, 7, -39, -38, 13, 24, -14, 13, 7, 16, -7, -14, -1, 0, 4, -14, -6, 14, 23, 3, -20, 6, -53, 5, -30, -46, -8, -34, -5, 11, 18, 4, 14, 11, 27, -20, -62, 2, -3, -10, -5, -1, 6, 22, -6, -22, -7, -43, 8, -10, -29, -6, -22, 4, 0, 19, -2, 15, 6, 36, -33, -38, -2, 1, -8, -11, 4, 2, 20, -28, -32, -7, -37, 4, -11, -6, -31, -21, 1, 8, 11, -14, 12, -10, 11, -30, -13, -10, -16, 6, -4, -1, -10, 13, -17, -13, -48, -21, 12, 2, -21, -3, -23, 3, 7, 13, -29, 7, -5, 18, -38, -13, -1, -59, -7, -5, -9, 23, 16, -20, -7, -35, -49, -3, -8, 4, 4, -18, 9, 12, 12, -17, 6, -7, -27, -23, -18, -12, -62, -15, 3, -3, -1, -23, -7, -2, -29, -53, 15, -13, -15, 5, -15, 22, 10, 17, 8, -10, -6, 22, -17, -47, 4, -39, -17, -14, -22, -3, 
  -68, -20, -46, 2, -63, 21, 39, 15, 48, 17, 21, -9, 24, -24, -10, 11, -34, -4, -48, -18, -92, -6, 5, -61, 30, -82, -7, -29, -17, -48, 5, 21, 29, 26, 18, 6, -23, 13, -35, 27, 25, -38, -24, -55, 33, -17, -10, -9, 16, 26, -53, -19, -41, -36, -23, 27, 17, 12, 12, 3, -1, -32, 17, -41, -61, 20, -66, -29, -18, 33, -7, -14, 2, 26, 17, -56, -9, -34, -35, -29, 15, 23, 13, 24, 8, -1, -7, 9, -13, -36, 26, -62, -27, -39, 34, -6, -27, 1, 34, 19, -66, -30, -30, -35, -19, 6, 12, 31, 19, 4, 1, 2, 1, -17, -23, 26, -20, -47, -42, 15, -17, -27, -7, 28, 17, -59, -21, -5, -40, -25, 11, -1, 44, 21, -13, -7, -3, 21, -40, -2, 20, -28, -67, -33, 16, -25, -43, -8, 18, 12, -45, -11, -31, -38, -32, 9, 32, 6, 16, -24, 0, -10, -15, -22, 4, 11, -7, -36, -27, 15, -18, -44, -15, 3, 5, -38, 9, -20, -23, -35, 25, 18, 12, 13, -5, -43, 10, -9, -6, 3, -5, 7, -36, -41, 8, 0, -37, 0, 8, 8, 
  -65, 19, -36, 12, 26, 2, -47, -22, 38, -28, -102, -65, -38, -9, -19, -38, -38, 12, 10, 57, -61, 12, 6, -49, 15, -78, 15, -40, -5, 16, -11, -30, -1, 36, 0, -44, -75, -22, -27, -8, -9, -23, 1, 9, 18, -47, 14, 14, -50, -21, -115, 13, -35, 19, 12, -3, 25, -10, 44, -7, -16, -66, -14, -24, 4, -3, -5, -10, 10, 13, -17, 7, 12, -46, -34, -102, 27, -29, 21, 33, -13, 6, 7, 46, 5, -8, -59, -16, -38, -17, 4, 13, 12, 12, 15, -22, 15, 11, -36, 0, -50, 27, -2, 18, 6, -9, -2, 0, 47, 5, -5, -35, -32, -42, -19, 11, -6, 10, 23, 27, -30, 18, 10, -28, 0, -49, 19, -3, 20, 9, 9, -14, 3, 17, 11, -9, -32, -26, -30, -28, 12, -24, -2, 31, 17, -45, 14, 12, -31, -21, -38, 10, -1, 20, 0, -24, 8, 1, 0, 8, -12, -22, -39, -25, -26, 3, -13, -7, 26, -12, -32, -2, 19, -17, -8, -38, -7, -3, 28, -9, -30, -3, -14, 0, 19, -3, -12, -6, -14, -8, -9, -5, 8, 8, 2, -9, -28, 19, -41, -9, 
  -47, -20, 4, -20, -11, 27, 25, 15, -35, 0, -37, 12, 2, -45, -46, 8, -80, 6, 5, -15, -125, -2, -18, -39, -47, -77, -10, 23, -1, -24, 1, 6, -2, -16, 3, -19, 5, -9, -30, -113, 16, -61, 7, -9, -23, -78, -16, -6, -37, -53, -58, -1, 48, 11, -46, 14, -1, -1, -27, 2, -22, 24, -4, -13, -25, -21, -41, 15, -31, -22, -66, -19, 5, -12, -29, -65, 26, 55, 23, -54, 20, 6, 11, -24, 9, -15, 34, -7, -16, -30, -28, -16, 27, -43, -41, -38, 0, 17, -40, -28, -65, 11, 65, 30, -58, 7, -1, 24, -15, 23, -6, 33, -18, -32, -5, -43, -6, 29, -37, -33, -29, 0, 25, -42, -14, -44, 12, 60, 32, -34, -1, 15, 27, -37, 32, 6, 6, -15, -46, -31, -26, 4, 18, -6, -40, -28, -11, 22, -24, -41, -44, 5, 39, 30, -29, -35, 31, 33, -34, 23, 20, -49, -67, -44, -18, -34, 4, 14, -12, -54, -12, -39, 19, -20, -17, -42, -2, -32, 39, -29, -127, 8, 17, -32, 43, 46, -31, -51, -40, -43, -1, -15, 17, -32, -47, 5, -28, 40, -42, -7, 
  -80, -1, -15, 13, -53, 5, -39, 8, 10, 7, 14, -9, 33, -15, -14, -2, -24, 13, -22, -46, -61, 7, 8, -83, -21, -92, -19, -11, 0, -18, -5, -38, 26, -26, 18, 20, -34, 18, -38, -14, 2, -23, 9, -11, 8, -48, 8, 9, -100, -17, -79, -26, -10, 2, 15, 1, -46, 26, -39, 23, 21, -28, 4, -41, -29, -21, -30, 3, 6, 19, -21, 16, 11, -56, -60, -79, -20, -4, -3, 13, -8, -48, 33, -18, 27, 27, -38, -6, -38, 9, 1, -49, -2, 8, 38, -30, 16, 15, -49, -39, -69, -29, 5, -56, 13, 10, -37, -16, -27, 22, 31, -12, -14, -28, 11, -20, -30, -17, 12, 42, 3, 23, -3, -20, -6, -53, -18, -6, -43, 33, -9, -19, -25, -11, -33, 26, -9, -58, -15, 20, -38, -53, -36, 16, 37, 17, 24, -2, -13, -3, -64, -5, 3, -59, 26, -9, -5, -25, 5, -44, -36, -14, -80, -22, 13, -35, -7, -61, 22, 14, 25, 16, -4, 2, 5, -55, 23, -4, -66, 26, -1, -8, 3, 11, -47, -62, -11, -80, -26, 13, -43, -14, -40, 16, 32, 2, 16, -14, 13, 16, 
  21, -36, -15, 11, 0, -19, -16, -47, -32, 40, 20, 2, -56, -1, -1, -23, 14, -17, -29, 1, 35, -43, -42, 4, -7, 12, 8, -27, 24, -19, -15, -2, -16, -21, 18, 15, -34, -46, -18, -16, -31, -19, 11, -39, -6, 39, -46, 9, -10, -30, -1, -11, -54, 5, -20, -7, 2, -7, -44, 3, -5, -55, -57, 4, -41, 15, -24, 10, -60, 7, 35, -48, 9, 2, -20, -16, 21, -36, 22, -36, -8, 20, -4, -5, -12, 0, -50, -14, -26, -13, 24, -3, 29, -40, 13, 34, -70, 32, -18, -18, -29, 15, -59, 35, -32, 0, 11, 0, -17, -17, -29, -35, -7, 5, 8, 15, -1, 25, -30, 14, 12, -46, 23, -53, -31, 0, 31, -38, 32, -14, 11, 33, -48, -8, -1, -13, -35, -2, 5, -78, 19, -35, 23, -20, -4, 13, -31, 20, -61, -67, 6, 24, -23, 17, -29, 22, 15, -32, -16, 13, 7, -6, 1, 25, -66, 21, -83, 52, -33, -28, 2, -44, 32, -65, -47, -54, 7, 36, 16, -10, 12, 8, -31, -22, 23, 33, -5, 31, -13, -55, 28, -63, 28, -6, -59, -16, -12, 50, -43, -60, 
  17, 16, 0, -31, 22, -49, -10, -17, 9, 8, -10, -29, -55, 33, -44, -15, 2, -7, 8, -18, 5, -3, -13, -10, -3, 17, 26, 15, -13, 17, -34, -10, 8, 31, 3, -26, -13, -25, 29, -31, -17, -5, -20, 3, -50, -1, 8, 4, -8, 1, 22, 21, 11, -33, 16, -28, -18, -10, 27, -9, -53, -9, -13, 42, -19, -34, -10, -51, 8, -36, 4, 13, 2, 7, 3, 20, 18, 13, -39, 19, -22, -4, 12, 23, -3, -22, -16, -4, 34, -8, -18, -19, -34, 19, -34, -8, 7, 17, 7, -11, 16, -1, 14, -50, 18, -15, -14, 25, 25, -8, -13, -7, -6, 39, -1, -10, -19, -28, 22, -43, -17, 16, 11, -1, -12, 24, -14, 4, -41, 24, -19, -6, 26, -4, 8, -13, -29, -1, 47, -9, -24, 4, -20, 15, -18, -31, 15, 8, -16, 0, 2, -36, 7, -10, 11, -34, -39, 24, -11, 26, -31, -6, 4, 21, 4, -47, -2, -32, 12, 1, -12, 11, 10, -25, 10, 47, -33, -15, -24, -1, -29, -35, 17, -10, 2, -6, -10, -2, 35, 11, -25, -21, -28, 11, 11, -6, 13, -19, -15, 13, 
  6, -6, -26, 21, -1, 14, 42, -19, 20, -9, 16, -20, 1, -35, -7, 25, -23, -3, -10, 15, 18, -3, 1, 39, -6, 9, -37, -19, 31, 23, 13, 26, -54, 48, -2, 8, -44, 10, -26, -41, 38, -49, -5, -21, 2, 35, -13, -18, 27, 0, 17, -35, -37, 10, 7, 15, 17, -53, 36, 3, -17, -44, 7, -15, -39, 38, -55, 9, -44, 2, 45, -27, -46, 29, -10, 0, -53, -50, 12, 9, 9, 40, -46, 9, -28, -32, -42, -23, -23, -31, 15, -64, -18, -35, 2, 43, -37, -57, 26, -13, -8, -45, -39, 25, 8, -3, 37, -2, 13, -17, -5, -36, -37, -28, -23, 25, -47, -32, -39, -14, 33, -45, -49, 31, 18, 3, -32, -39, 14, 1, -8, 25, 5, 3, -11, 10, -32, -47, -26, -21, 34, -40, -35, -33, 2, 43, -32, -33, 38, 24, 35, -40, 5, 8, 0, 20, 5, -2, 0, -41, 20, -20, -39, -4, -13, 26, -65, -37, -21, 8, 51, -50, -15, 51, -23, 37, -47, 11, 15, 1, 18, -1, -41, -3, -9, 30, -16, -23, -23, -9, 32, -46, -19, -36, -9, 12, -32, -28, 29, -26, 
  6, -23, 39, 3, 17, -27, 18, -35, -79, -14, 17, 8, -61, -44, -10, 14, 9, -1, 20, 1, -48, 7, -10, 9, 7, 5, -9, 31, -5, 3, -40, -2, 7, -39, -32, 4, 13, -12, -39, 3, 10, 3, -18, 21, -17, -49, 19, 22, 2, 42, 13, -42, 28, -8, 2, -33, -1, 12, -42, -49, 2, 17, -2, -26, 22, -2, 18, -42, 22, -7, -64, 20, 13, 12, 44, -1, -37, 21, -20, 16, -24, -3, 18, -36, -32, 6, 5, -8, -44, 32, -7, 6, -45, 25, -11, -63, 22, 10, 4, 44, 0, -53, 21, -20, 18, -17, -12, 9, -36, -12, 3, 9, -13, -57, 19, -14, -13, -36, 31, -20, -45, 26, 0, -2, 14, 2, -72, -11, -35, 19, -22, -36, 1, -26, -13, -9, 5, -4, -21, -3, 0, -22, -46, 25, -12, -36, 22, -4, -1, 15, 30, -38, -36, -47, 7, -17, -38, 14, -4, -45, -10, 19, -9, -12, 10, 2, -25, -51, 24, -39, -7, 22, -30, -7, -2, 13, -18, -6, -60, 18, -7, -60, 7, 1, -41, 0, 23, -3, -11, -5, 6, 9, -53, 10, -33, -39, 27, -54, -41, 3, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 12,200 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0093495836481451988, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[14] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 14 } };
const TfArray<14, float> quant6_scale = { 14, { 0.00025536434259265661, 0.00017136911628767848, 0.00012940724263899028, 0.00024431527708657086, 0.00014818379713688046, 0.00019938709738198668, 0.00015168017125688493, 0.00019385422638151795, 0.00017771562852431089, 0.00032369725522585213, 0.00020099949324503541, 0.00019034647266380489, 0.00018229111446999013, 0.00019477574096526951, } };
const TfArray<14, int> quant6_zero = { 14, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[14*1*3*17] = { 
  /* [0][0][][] */ 127,-76,60,-30,73,3,36,-17,-28,15,-14,4,-3,-22,12,-14,18, 45,-45,82,11,50,-14,25,-16,-16,31,-12,11,12,3,-5,-5,10, 19,22,30,-34,40,-3,-6,-11,-16,40,-14,-17,8,-3,-10,5,9, 
  /* [1][0][][] */ 125,127,85,-84,30,-35,-92,-69,48,-11,29,32,-18,-23,13,-69,22, 98,-58,65,63,9,-10,-56,-11,-12,-26,17,11,1,-11,25,-19,-4, 47,-23,121,54,12,-18,-52,23,7,-19,50,35,-27,30,3,-11,7, 
  /* [2][0][][] */ 63,92,-127,-29,-2,119,-19,-14,-3,-83,29,-13,3,34,-43,27,8, 7,108,-76,-68,6,95,-5,-51,-19,-28,28,-23,3,-4,-33,-2,-1, 19,99,-78,-68,37,95,-35,-9,33,-37,-33,-4,9,-30,-39,29,-6, 
  /* [3][0][][] */ -41,-6,53,42,-1,16,-6,-127,27,-17,-8,-5,1,15,-12,-17,13, -23,87,56,34,14,48,-43,-70,48,-31,-8,-14,-7,14,-10,-18,5, 67,56,34,48,-31,10,-47,-45,43,-12,3,5,2,21,-15,1,0, 
  /* [4][0][][] */ 127,-61,-80,35,17,-66,66,78,-11,-35,26,14,-27,-2,73,-39,24, 116,-40,-47,24,5,-2,79,46,-71,-12,22,19,-1,-27,46,-45,-3, 80,-61,-44,21,-11,0,32,49,-39,-52,55,6,-25,44,41,-40,-38, 
  /* [5][0][][] */ -125,-72,94,-23,-28,102,-5,-4,-26,46,-80,8,25,-43,-17,27,-51, -105,58,127,29,-31,40,-44,-14,-20,13,-57,12,-2,-23,0,-15,-5, -69,38,100,18,-69,22,-12,-44,14,13,-23,1,23,-56,18,11,4, 
  /* [6][0][][] */ -105,22,127,23,-89,-58,-38,50,-8,76,49,3,15,-31,74,-9,-15, -111,99,44,89,-96,11,-11,49,39,26,3,-31,-22,6,40,-8,10, 68,-88,63,15,-64,-84,47,82,-53,39,54,-22,-34,33,25,-40,24, 
  /* [7][0][][] */ -51,64,-11,-105,-18,43,15,-93,-5,123,-52,-3,-22,30,-6,7,29, -24,60,12,-127,3,43,15,-120,38,93,-49,-19,-9,38,1,-19,21, -67,42,-53,-48,2,13,11,-30,-1,99,-75,-2,-13,-7,30,-36,40, 
  /* [8][0][][] */ 9,-38,16,-19,-78,51,40,-11,-67,63,-39,15,27,-30,2,41,-24, 15,-52,35,28,-120,41,55,-36,-31,77,-61,-11,23,-42,20,37,-54, -75,-22,48,49,-127,28,60,-61,-18,94,-83,44,57,-52,28,27,-35, 
  /* [9][0][][] */ -127,-35,0,0,72,-7,-22,24,8,19,-25,12,11,-21,25,-18,4, -46,-45,-43,-13,-9,31,-11,-6,9,-21,-3,5,9,10,18,-3,-15, -4,2,-50,3,5,8,-15,12,-8,-21,3,19,-9,18,1,-2,-16, 
  /* [10][0][][] */ -108,-37,23,96,-16,53,-18,-53,39,-60,-28,-32,-27,15,-37,6,-8, -106,127,5,69,-26,55,-51,-78,48,-51,22,-25,-18,20,-36,-4,-23, -52,52,63,72,20,49,-28,-4,39,-45,6,-18,-12,13,8,-26,-16, 
  /* [11][0][][] */ 71,42,-2,38,-127,20,86,-5,-42,18,-11,-51,19,5,-45,63,-27, -9,53,-39,24,-90,6,80,-6,-35,39,1,-37,31,18,-29,34,-6, -36,32,-6,54,-92,1,57,0,-16,15,13,-41,-11,-8,-39,29,-39, 
  /* [12][0][][] */ -18,-127,29,-6,-2,-95,31,-29,41,46,40,-8,-1,5,-5,23,9, 33,55,30,-52,-48,-83,-1,32,7,30,39,-10,-28,-6,24,-12,27, -76,91,30,5,-13,-50,-10,55,-4,3,1,12,-40,24,22,-11,44, 
  /* [13][0][][] */ 127,-71,111,-23,-9,39,19,-18,-1,24,-19,-10,39,-38,-13,14,-20, 124,-56,54,-25,-9,21,29,-34,-9,-5,9,-29,25,27,-22,25,-16, -40,-68,37,7,49,15,73,-32,-40,-14,30,-18,21,2,-58,39,-22, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 14,1,3,17 } };
const TfArray<14, float> quant7_scale = { 14, { 0.007136304397135973, 0.0047890092246234417, 0.0036163602489978075, 0.006827531848102808, 0.0041410820558667183, 0.0055719879455864429, 0.0042387903667986393, 0.0054173688404262066, 0.0049663661047816277, 0.0090459072962403297, 0.005617047194391489, 0.0053193424828350544, 0.0050942306406795979, 0.0054431208409368992, } };
const TfArray<14, int> quant7_zero = { 14, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[25] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 25 } };
const TfArray<25, float> quant8_scale = { 25, { 0.00022217894729692489, 0.00028874530107714236, 0.00036092533264309168, 0.00029334757709875703, 0.00025304188602603972, 0.00018823826394509524, 0.00033285908284597099, 0.00023832697479519993, 0.0003742744738701731, 0.00024312660389114171, 0.00018736263155005872, 0.00016510533168911934, 0.00037431827513501048, 0.00027354774647392333, 0.00027411337941884995, 0.00033667043317109346, 0.00024502893211320043, 0.00019574067846406251, 0.00037653939216397703, 0.00024048074556048959, 0.00021608477982226759, 0.00017654320981819183, 0.00016481294005643576, 0.00023467572464141995, 0.00025886791991069913, } };
const TfArray<25, int> quant8_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[25*1*3*14] = { 
  /* [0][0][][] */ -38,2,84,-42,1,-16,-123,42,-10,-29,-66,-7,-64,-60, -57,-29,4,-127,26,-83,-42,11,23,-13,-80,9,-50,-37, -8,27,120,-46,-5,-36,3,28,45,-27,-81,25,-19,5, 
  /* [1][0][][] */ 64,16,16,-37,-23,-44,-24,-11,-17,-10,-117,-35,24,28, -17,3,-1,-62,-7,-60,-4,49,-15,-8,-127,-20,76,-2, -11,61,-25,-31,11,-28,37,-3,-8,4,-6,0,12,-13, 
  /* [2][0][][] */ -53,-14,-11,36,-33,7,24,26,30,-7,20,15,28,-69, -60,-43,2,-39,20,-7,4,20,-20,4,-13,2,-40,-127, 16,-32,1,-104,30,-60,-5,6,30,-10,-64,5,-40,-33, 
  /* [3][0][][] */ 33,34,22,1,2,-87,-15,-28,-27,-49,-61,-2,-28,71, 5,8,27,-49,36,-127,-75,-30,-42,-32,-79,-24,-51,25, 0,-41,17,-3,-2,-60,-103,-21,-40,10,-23,-35,15,20, 
  /* [4][0][][] */ -42,39,-2,38,25,-24,-16,95,-60,-124,-3,-18,-23,-82, -40,16,3,30,2,-17,-8,-60,-62,-127,9,-21,-20,-95, -8,29,16,-3,-11,1,-1,84,-20,-80,23,-34,-36,-21, 
  /* [5][0][][] */ -12,50,-127,-20,-54,-10,22,4,25,-41,-70,65,87,0, -16,36,-74,-62,-35,-19,113,11,9,24,-105,16,3,4, -24,-29,-30,-74,4,-46,-1,-6,17,22,-86,61,49,-15, 
  /* [6][0][][] */ 1,46,5,2,13,-1,37,-16,3,-72,-54,66,-13,32, -19,-6,3,-72,16,-101,3,-16,-23,-28,-63,10,5,-10, -17,-35,6,-79,7,-127,-1,-29,-45,-12,-34,-8,-21,-17, 
  /* [7][0][][] */ -19,-31,-47,-127,31,-8,-117,-14,-21,46,4,-57,-62,16, 68,-13,-42,-32,15,-11,-71,-102,17,-22,-11,-12,-53,25, 24,-14,-13,27,-27,29,-49,1,3,-9,12,-7,-22,38, 
  /* [8][0][][] */ -6,-21,-2,-53,-16,-28,-8,59,19,21,-76,39,15,49, -25,-24,3,-127,-9,-64,-31,-26,-1,10,-67,9,-18,4, -29,-1,5,-80,-4,-51,3,38,-10,1,-22,-5,19,-3, 
  /* [9][0][][] */ 59,10,19,7,18,-19,-127,66,-30,-42,-11,-63,-42,10, 9,10,-35,6,23,-5,-65,-47,-20,-48,-4,-73,-24,55, 36,9,-34,13,-7,8,-11,-72,-22,-14,10,-43,-25,1, 
  /* [10][0][][] */ 11,-40,-6,-40,-4,127,5,-24,26,-15,-14,-21,-40,26, -6,-72,0,-39,69,-17,-9,-12,68,-6,6,-6,-51,-15, -10,-27,21,-17,-1,73,-14,-25,31,-13,16,-16,-59,-23, 
  /* [11][0][][] */ -109,-79,39,-37,29,-21,-37,-61,24,1,-44,127,-32,-38, -121,-22,-47,-1,-64,-5,-14,-2,18,-19,10,68,-36,-14, -22,6,-90,21,-119,25,8,-13,43,-71,33,126,47,24, 
  /* [12][0][][] */ 20,28,-68,3,-10,0,-6,-50,32,-127,-27,27,-21,26, 1,10,-51,0,-40,-1,-4,-50,2,-107,-23,5,3,2, 4,13,-35,8,-46,14,1,-41,20,-67,-13,31,6,3, 
  /* [13][0][][] */ -33,15,28,15,-32,-42,-127,64,-13,-50,-89,16,-11,-64, -58,20,16,-11,-13,-51,-26,110,-12,-56,-119,-20,-47,-78, 37,62,-32,-35,16,-45,40,-12,2,-111,-90,-9,-30,1, 
  /* [14][0][][] */ -17,-66,10,-55,7,-57,-20,-34,-77,74,-20,-43,-30,-55, -25,-51,0,-127,4,-75,-3,-38,-8,22,-62,56,-25,-24, -31,-7,19,-55,10,-11,11,-4,35,-25,-92,3,14,-27, 
  /* [15][0][][] */ 25,-10,-81,8,-92,7,-13,14,-13,19,4,-82,38,-14, 27,16,-77,11,-127,18,-1,15,-4,-12,-5,-61,-8,-27, 41,19,-56,1,-66,6,7,7,13,-8,-15,-15,25,-3, 
  /* [16][0][][] */ 107,-26,-5,3,-66,17,-22,5,-44,31,8,-125,80,3, 0,-103,31,-22,-45,-9,-103,19,-90,14,-5,-99,-38,-71, -42,-111,36,-127,78,-41,-90,3,-43,-3,-12,3,-112,-75, 
  /* [17][0][][] */ 2,34,0,-20,-3,-61,-23,-34,-88,-72,-67,-126,-9,14, 127,98,-41,-23,3,-91,2,-72,-76,-48,-73,-84,76,35, -9,22,6,6,4,-15,27,1,-79,-24,-16,-54,41,-29, 
  /* [18][0][][] */ -53,22,-16,31,-36,-3,-9,-47,-51,-24,30,-8,-10,-21, -64,14,-6,6,-30,13,-3,-91,-127,-37,27,-21,-21,-13, -7,3,-4,27,11,6,2,-46,-98,-14,8,-34,-25,18, 
  /* [19][0][][] */ -61,51,-12,-29,29,-97,18,-75,-127,36,-45,2,87,-95, -94,29,3,-7,25,-59,20,-84,-126,-57,-21,5,19,-117, -62,37,18,4,9,-3,18,-34,-72,-15,27,-25,7,-78, 
  /* [20][0][][] */ -39,-23,114,2,15,-75,-34,-71,-39,-31,13,65,-22,50, -15,-1,-55,13,-23,-78,-95,-22,-99,-42,13,-9,-11,-11, -69,-10,74,3,-33,-76,-127,32,-107,-9,-5,-59,-12,-53, 
  /* [21][0][][] */ -49,40,-15,72,35,-45,-30,-43,67,-97,-39,69,-25,-33, -118,50,-18,4,-119,-26,-51,-29,-10,-98,113,15,-127,-9, -93,22,-23,61,-113,-8,-32,-75,-106,-47,13,-13,-117,-4, 
  /* [22][0][][] */ 127,-17,-5,-62,5,-24,-29,25,1,-51,-71,-17,23,-29, 17,-4,-93,-33,59,-54,-15,-11,55,-54,-106,3,83,78, 57,-60,-42,-5,-29,-30,-47,38,-19,-16,119,-3,67,-3, 
  /* [23][0][][] */ -87,17,-8,-76,53,-68,49,14,-30,-46,-31,94,-5,-31, -87,-88,46,-55,27,-92,-9,4,-91,-11,36,20,-14,-102, -111,-127,-4,-46,-6,-77,-22,9,-48,13,28,-15,-6,-69, 
  /* [24][0][][] */ -43,25,-25,-21,41,-14,14,-59,-102,-15,-17,-74,4,-39, -27,-43,-5,-80,3,-40,-84,-20,13,76,-15,-21,-36,-4, -29,-46,6,-127,17,-65,-80,19,45,1,-20,19,-35,0, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 25,1,3,14 } };
const TfArray<25, float> quant9_scale = { 25, { 0.0053786183707416058, 0.006990090012550354, 0.0087374597787857056, 0.0071015036664903164, 0.0061257635243237019, 0.0045569655485451221, 0.0080580180510878563, 0.0057695377618074417, 0.0090606221929192543, 0.0058857295662164688, 0.0045357677154242992, 0.0039969519712030888, 0.0090616829693317413, 0.0066221794113516808, 0.0066358731128275394, 0.0081502851098775864, 0.0059317820705473423, 0.0047385874204337597, 0.009115452878177166, 0.005821677390486002, 0.0052310875616967678, 0.0042738458141684532, 0.0039898734539747238, 0.005681146401911974, 0.0062668034806847572, } };
const TfArray<25, int> quant9_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 32, 17, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 32, 14, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data12[4] = { 1, 32, 1, 14, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data13[4] = { 1, 1, 16, 14, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 16, 25, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data15[4] = { 1, 16, 1, 25, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,32,17 } };
const TfArray<1, float> quant16_scale = { 1, { 0.035783834755420685, } };
const TfArray<1, int> quant16_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,32,14 } };
const TfArray<1, float> quant17_scale = { 1, { 0.088860668241977692, } };
const TfArray<1, int> quant17_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,32,14 } };
const TfArray<1, float> quant18_scale = { 1, { 0.088860668241977692, } };
const TfArray<1, int> quant18_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,32,14 } };
const TfArray<1, float> quant19_scale = { 1, { 0.041307810693979263, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,32,1,14 } };
const TfArray<1, float> quant20_scale = { 1, { 0.041307810693979263, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,16,1,14 } };
const TfArray<1, float> quant21_scale = { 1, { 0.041307810693979263, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,16,14 } };
const TfArray<1, float> quant22_scale = { 1, { 0.041307810693979263, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,16,25 } };
const TfArray<1, float> quant23_scale = { 1, { 0.20442424714565277, } };
const TfArray<1, int> quant23_zero = { 1, { 70 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,16,25 } };
const TfArray<1, float> quant24_scale = { 1, { 0.20442424714565277, } };
const TfArray<1, int> quant24_zero = { 1, { 70 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,16,25 } };
const TfArray<1, float> quant25_scale = { 1, { 0.044805262237787247, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,16,1,25 } };
const TfArray<1, float> quant26_scale = { 1, { 0.044805262237787247, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,8,1,25 } };
const TfArray<1, float> quant27_scale = { 1, { 0.044805262237787247, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,200 } };
const TfArray<1, float> quant28_scale = { 1, { 0.044805262237787247, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,12 } };
const TfArray<1, float> quant29_scale = { 1, { 0.19574660062789917, } };
const TfArray<1, int> quant29_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,12 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 544, (TfLiteIntArray*)&tensor_dimension0, 544, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 14, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 25, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 56, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 714, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1050, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 544, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 544, (TfLiteIntArray*)&tensor_dimension17, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension19, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension21, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension23, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension25, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension27, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension29, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
